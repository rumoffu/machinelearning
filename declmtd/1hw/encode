#!/usr/bin/env python

#######################################
##  Kyle Wong, Tifany Yung
##  kwong23@jhu.edu, tyung1@jhu.edu
##  February 26, 2014
##  Declarative Methods Assignment 1
#######################################


## This program traverses the dictionary and writes CNF clauses for each word, including each letter a-z.
## This script reads in a word dictionary and a puzzle format file, and outputs a CNF encoding to stdout.

import os, subprocess
import sys

def main():
  dict_fn = 'microwords'
  puzz_fn = 'micro.puzzle'
  dict_fn = sys.argv[2]
  puzz_fn = sys.argv[1]
  word_dict = readDict(dict_fn)
  grid = readPuzzle(puzz_fn)
  encodeDict(puzz_fn, word_dict, grid)
  #enforceSingular(puzz_fn)

def readDict(dict_fn):
  dic = open(dict_fn, 'r')
  # Add # and all single letters to dictionary.
  word_dict = {}
  word_dict['#'] = []
  atoz = map(chr, range(97, 123)) #[]
  for let in atoz:
    word_dict['#'].append(let)
    word_dict['#' + let] = []
    word_dict['#' + let].append('#')
    # Since every letter is considered a valid word.

  # Go through dictionary and add the words.
  for word in dic:
    word = word.strip() + '#'
    for i in xrange(len(word)):
      if ('#' + word[0:i]) in word_dict:
        if word[i] not in word_dict['#' + word[0:i]]:
          word_dict['#' + word[0:i]].append(word[i])
      else:
          word_dict['#' + word[0:i]] = []
          word_dict['#' + word[0:i]].append(word[i])
  #for key, value in word_dict.iteritems():
    #print key, value

  return word_dict

def encodeDict(puzz_fn, word_dict, grid):
  #encode dictionary entries as cnf
  puzz = open(puzz_fn, 'r')
  size = puzz.readline().strip().split()
  x = int(size[0])
  y = int(size[1])
  #for horizontal dictionary words
  for prefix, nextlets in word_dict.iteritems():
    for col in xrange(x):
      for row in xrange(y):
        if grid[col][row] == '.':
          #for i in xrange(len(prefix)):
          i = 0
          clause = '('
          while i < len(prefix):
            offset = len(prefix) - i
            coloffset = col - offset
            prefixi = prefix[i]
            if coloffset < 0:
              break
            clause = clause + '~{prefixi}_{coloffset}_{row}'.format(**locals())
            i = i + 1
            if (i < len(prefix)):
              clause = clause + ' v '
          if coloffset < 0:
            continue
          clause = clause + ' v '
          for let in nextlets:
            clause = clause + '{let}_{col}_{row} v '.format(**locals())
          clause = clause[:-3] + ')'#cut off + v that overhangs
          print clause + ' & '
          #print prefix, nextlets


  #for vertical dictionary words
  for prefix, nextlets in word_dict.iteritems():
    for col in xrange(x):
      for row in xrange(y):
        if grid[col][row] == '.':
          #for i in xrange(len(prefix)):
          i = 0
          clause = '('
          while i < len(prefix):
            offset = len(prefix) - i
            rowoffset = row - offset
            prefixi = prefix[i]
            if rowoffset < 0:
              break
            clause = clause + '~{prefixi}_{col}_{rowoffset}'.format(**locals())
            i = i + 1
            if (i < len(prefix)):
              clause = clause + ' v '
          if rowoffset < 0:
            continue
          clause = clause + ' v '
          for let in nextlets:
            clause = clause + '{let}_{col}_{row} v '.format(**locals())
          clause = clause[:-3] + ')'#cut off + v that overhangs
          print clause + ' & '
          #print prefix, nextlets

#for ans in word_dict['#o']:
    #print ans

def readPuzzle(puzz_fn):
  puzz = open(puzz_fn, 'r')
  size = puzz.readline().strip().split()
  x = int(size[0])
  y = int(size[1])
  grid = [['' for i in xrange(y)] for i in xrange(x)]
  linenum = 0
  for line in puzz.readlines():
    line = line.strip()
    grid[linenum] = []
    for char in line:
      grid[linenum].append(char)
    linenum = linenum + 1
  #for line in grid:
    #print line
  atoz = map(chr, range(97, 123)) 
  for col in xrange(x):
    for row in xrange(y):
      pclause = ''
      if grid[col][row] == '.':
        pclause = pclause + '('
        for let in atoz:
          pclause = pclause + '{let}_{col}_{row} v '.format(**locals())
        pclause = pclause[:-3] + ')'#cut off + v that overhangs
      else:
        inputchar = grid[col][row]
        pclause = pclause + '({inputchar}_{col}_{row})'.format(**locals())
      print pclause + ' & '
  
  #ensure only 1 letter per square
  xclause = ''
  for col in xrange(x):
    for row in xrange(y):
      if grid[col][row] == '.':
        for let in atoz:
          xclause = ''
          for nonlet in atoz:
            if nonlet != let:
              xclause = xclause + '(~{let}_{col}_{row} v ~{nonlet}_{col}_{row}) & '.format(**locals())
              #xclause = xclause + '(~{let}_{col}_{row} v ~{nonlet}_{col}_{row}) & ({let}_{col}_{row} v {nonlet}_{col}_{row}) & '.format(**locals())
          xclause = xclause[:-3] + ')'
          print xclause + ' & '
  return grid

#print 'opened %s' % puzz_fn
  # Read and do the work.

def enforceSingular(puzz_fn):
  puzz = open(puzz_fn, 'r')
  size = puzz.readline().strip().split()
  x = int(size[0])
  y = int(size[1])
  atoz = map(chr, range(97, 123))

  for col in xrange(x):
    for row in xrange(y):
      sclause = ''
      for let in atoz:
        sclause = sclause + '(~#_{col}_{row} v {let}_{col}_{row}) & (#_{col}_{row} v ~{let}_{col}_{row}) & '.format(**locals())
      sclause = sclause[:-3] + ')'
      print sclause + ' & '

  for col in xrange(x):
    for row in xrange(y):
      sclause = ''
      for let in atoz:
        for inlet in atoz:
          sclause = sclause + '(~#_{col}_{row} v {let}_{col}_{row}) & (#_{col}_{row} v ~{let}_{col}_{row}) & '.format(**locals())
        sclause = sclause[:-3] + ')'
      print sclause + ' & '

## Function to call main
if __name__ == '__main__':
  main()
  
